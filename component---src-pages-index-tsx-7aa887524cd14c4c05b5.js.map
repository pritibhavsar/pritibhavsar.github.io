{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["query","render","data","site","siteMetadata","description","social","href","twitter","Index","this","props","siteTitle","title","posts","allMarkdownRemark","edges","keywords","className","map","node","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery"],"mappings":"wVAce,aACb,OACE,kBAAC,cAAD,CACEA,MAAK,aAYLC,OAAQ,SAACC,GAA0B,MACHA,EAAKC,KAAKC,aAAjCC,EAD0B,EAC1BA,YAAaC,EADa,EACbA,OACpB,OACE,6BACE,4BAAKD,GACL,4CAEE,6BACA,uBAAGE,KAAMD,EAAOE,SAAhB,cArBV,U,sFCLiBC,E,gLACnBR,OAAA,WAAS,IACAC,EAAQQ,KAAKC,MAAbT,KACDU,EAAYV,EAAKC,KAAKC,aAAaS,MACnCC,EAAQZ,EAAKa,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQH,MAAOD,GACb,kBAAC,IAAD,CAAMC,MAAM,YAAYI,SAAU,CAAC,OAAD,iCAClC,kBAAC,EAAD,MACA,iCACE,yBAAKC,UAAS,gBACXJ,EAAMK,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,4BACE,kBAAC,OAAD,CAAME,GAAIL,EAAKE,OAAOC,MAAOV,IAE/B,+BAAQO,EAAKC,YAAYK,MACzB,uBAAGC,wBAAyB,CAACC,OAAQR,EAAKS,mB,GApBzBC,IAAMC,WAqD5BC,EAAY","file":"component---src-pages-index-tsx-7aa887524cd14c4c05b5.js","sourcesContent":["import React from 'react'\r\nimport {StaticQuery, graphql} from 'gatsby'\r\n\r\ntype StaticQueryData = {\r\n  site: {\r\n    siteMetadata: {\r\n      description: string\r\n      social: {\r\n        twitter: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default function() {\r\n  return (\r\n    <StaticQuery\r\n      query={graphql`\r\n        query {\r\n          site {\r\n            siteMetadata {\r\n              description\r\n              social {\r\n                twitter\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={(data: StaticQueryData) => {\r\n        const {description, social} = data.site.siteMetadata\r\n        return (\r\n          <div>\r\n            <h1>{description}</h1>\r\n            <p>\r\n              By Jeff Rafter\r\n              <br />\r\n              <a href={social.twitter}>Twitter</a>\r\n            </p>\r\n          </div>\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Link, graphql} from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Head from '../components/head'\r\nimport Bio from '../components/bio'\r\n\r\ninterface Props {\r\n  readonly data: PageQueryData\r\n}\r\n\r\nexport default class Index extends React.Component<Props> {\r\n  render() {\r\n    const {data} = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n\r\n    return (\r\n      <Layout title={siteTitle}>\r\n        <Head title=\"All posts\" keywords={[`blog`, `gatsby`, `javascript`, `react`]} />\r\n        <Bio />\r\n        <article>\r\n          <div className={`page-content`}>\r\n            {posts.map(({node}) => {\r\n              const title = node.frontmatter.title || node.fields.slug\r\n              return (\r\n                <div key={node.fields.slug}>\r\n                  <h3>\r\n                    <Link to={node.fields.slug}>{title}</Link>\r\n                  </h3>\r\n                  <small>{node.frontmatter.date}</small>\r\n                  <p dangerouslySetInnerHTML={{__html: node.excerpt}} />\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </article>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\ninterface PageQueryData {\r\n  site: {\r\n    siteMetadata: {\r\n      title: string\r\n    }\r\n  }\r\n  allMarkdownRemark: {\r\n    edges: {\r\n      node: {\r\n        excerpt: string\r\n        fields: {\r\n          slug: string\r\n        }\r\n        frontmatter: {\r\n          date: string\r\n          title: string\r\n        }\r\n      }\r\n    }[]\r\n  }\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      filter: {frontmatter: {published: {ne: false}}}\r\n      sort: {fields: [frontmatter___date], order: DESC}\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}